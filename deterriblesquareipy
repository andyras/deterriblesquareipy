#!/usr/bin/env python

import argparse as ap
import numpy as np
import scipy as sp
from scipy.misc import imread
from scipy.misc import imsave

parser = ap.ArgumentParser(description='Script to fix TEM images with bad quadrants')
parser.add_argument('-d', '--debug', help='Turn on debugging output', action='store_true')
parser.add_argument('-n', help='Number of autotuning steps (default is 4)', type=int, default=4)
parser.add_argument('images', nargs='+', metavar='filename', help='image(s) to be processed')

args = parser.parse_args()

def autoTune(img):
    '''
    Automatically finds the broken quadrant and adjusts it to match its neighbors.
    '''

    if (args.debug):
        print 'Autotuning...'

    # TODO maybe switch the 0 and 1
    xDim = img.shape[0]
    yDim = img.shape[1]

    ## construct vectors of grayscale values on adjacent quadrant edges
    #TODO read grayscale values as matrix

    # bottom of Q1 and top of Q4
    q1b = img[(xDim/2 - 1), (yDim/2):yDim]
    q4t = img[(xDim/2), (yDim/2):yDim]

    # left of Q1 and right of Q2
    q1l = img[0:(xDim/2), yDim/2]
    q2r = img[0:(xDim/2), yDim/2 - 1]

    # bottom of Q2 and top of Q3
    q2b = img[(xDim/2 - 1), 0:(yDim/2)]
    q3t = img[(xDim/2), 0:(yDim/2)]

    # right of Q3 and left of Q4
    q3r = img[(xDim/2):xDim, (yDim/2 - 1)]
    q4l = img[(xDim/2):xDim, (yDim/2)]

    ## find which quadrant is most likely to be the maladjusted one
    # calculate rms difference for each edge
    rmsRight = rms(q1b, q4t)
    rmsTop = rms(q1l, q2r)
    rmsLeft = rms(q2b, q3t)
    rmsBottom = rms(q3r, q4l)

    # each quadrant has two edges
    rmsQ1 = rmsTop + rmsRight
    rmsQ2 = rmsTop + rmsLeft
    rmsQ3 = rmsLeft + rmsBottom
    rmsQ4 = rmsBottom + rmsRight

    # find the largest
    if (max(rmsQ1, rmsQ2, rmsQ3, rmsQ4) == rmsQ1):
        q = 1
        insideEdge = np.append(q1l, q1b)
        outsideEdge = np.append(q2r, q4t)
        if (args.debug):
            print 'Q1 will be adjusted'
    elif (max(rmsQ1, rmsQ2, rmsQ3, rmsQ4) == rmsQ2):
        q = 2
        insideEdge = np.append(q2r, q2b)
        outsideEdge = np.append(q1l, q3t)
        if (args.debug):
            print 'Q2 will be adjusted'
    elif (max(rmsQ1, rmsQ2, rmsQ3, rmsQ4) == rmsQ3):
        q = 3
        insideEdge = np.append(q3r, q3t)
        outsideEdge = np.append(q4l, q2b)
        if (args.debug):
            print 'Q3 will be adjusted'
    else:
        q = 4
        insideEdge = np.append(q4l, q4t)
        outsideEdge = np.append(q3r, q1b)
        if (args.debug):
            print 'Q4 will be adjusted'

    ## find n which minimizes the rms difference in grayscale intensity along edges of quadrant
    n = 0
    newRMSValue = rms(insideEdge, outsideEdge)

    nSign = -1
    # case where pixels in quadrant need to be adjusted up
    if (sum(insideEdge) < sum(outsideEdge)):
        nSign = 1

    iter = 0
    maxIter = 2**16-1
    oldRMSValue = 1e10
    if (args.debug):
        print 'STARTING AUTOTUNE'
    while ((iter < maxIter) and (newRMSValue < oldRMSValue)):
        oldRMSValue = newRMSValue
        # increase the adjustment to the insideEdge pixels
        n += nSign
        if (args.debug):
            print 'n is %s' % n
        # find new adjusted RMS value
        newRMSValue = rms(insideEdge, outsideEdge, n)
        iter += 1
        if (args.debug):
            print 'oldRMSValue is %s' % oldRMSValue
            print 'newRMSValue is %s' % newRMSValue

    ## adjust the quadrant
    if (args.debug):
        print 'Adjusting Q%d by %d grayscale values' % (q, (n - nSign))

    img = adjustQuadrant(img, q, n - nSign)

    if (args.debug):
        print 'FINISHED AUTOTUNE'

    return img

def adjustQuadrant(img, q, n):
    '''
    Quadrant q is 1, 2, 3, or 4.  n is the adjustment to the RGB values.
    '''

    # the origin is at the top left of the image
    # TODO maybe switch the 0 and 1 in the shape array accesses
    if (q == 1):    # top right quadrant
        minx = img.shape[0]/2 + 0
        maxx = img.shape[0]
        miny = 0
        maxy = img.shape[1]/2
    elif (q == 2):    # top left quadrant
        minx = 0
        maxx = img.shape[0]/2
        miny = 0
        maxy = img.shape[1]/2
    elif (q == 3):    # bottom left quadrant
        minx = 0
        maxx = img.shape[0]/2
        miny = img.shape[1]/2 + 0
        maxy = img.shape[1]
    elif (q == 4):    # bottom right quadrant
        minx = img.shape[0]/2 + 0
        maxx = img.shape[0]
        miny = img.shape[1]/2 + 0
        maxy = img.shape[1]
    else:
        raise ValueError, 'Invalid quadrant specified.'

    # # convert to signed 32-bit int
    # imgArrayCopy = np.int32(img)

    # # shift the RGB values in each pixel
    # imgArrayCopy[miny:maxy,minx:maxx] += n

    # # clip values to account for wrapping of RGB values
    # imgArrayCopy = np.clip(imgArrayCopy, 0, 255)

    # # convert back to signed 8-bit int
    # img = np.uint8(imgArrayCopy)

    # shift the grayscale values in each pixel
    img[miny:maxy,minx:maxx] += n

    # clip values to account for wrapping of grayscale values
    # img = np.clip(img, 0, 255)

    return img

def rms(v1, v2, n=0.0):
    '''
    Finds the RMS difference between two vectors, with the values in the
    first vector adjusted by n.
    '''

    # important to convert to float, otherwise RMS wraps and is not correct
    newV1 = np.array(v1, dtype=float)
    newV2 = np.array(v2, dtype=float)

    return np.sqrt(np.mean((newV1 + n - newV2)**2))

for imagePath in args.images:
    if (args.debug):
        print("Processing %s..." % imagePath)

    # load file as numpy array
    img = imread(imagePath, flatten=True)

    if (args.debug):
        print(img)

    for ii in range(args.n):
        img = autoTune(img)
        if (args.debug):
            print("Adjusted img:")
            print(img)

    # save file
    newImagePath = 'CORRECTED_' + imagePath

    imsave(newImagePath, img)

    print("Corrected image saved in %s" % newImagePath)
